{"pages":[{"title":"","text":"","link":"/404.html"},{"title":"关于","text":"关于我 浮枕，之前用过很长一段时间的名字是 Miguel Duarte，现在主要作为网上的英文名。换成现在这个名字的主要是因为想有一个好记的中文网名，灵感来自于英文 fusion，改成了和它发音相似又给我感觉比较好听的中文。 主业和兴趣都是计算机相关，对内核与体系结构比较感兴趣。大部分时间都在写 C。 很少看动画，但是很喜欢幾原邦彥。 许可 本站 logo 和 404 页面图片来源于 freepik，并经过修改。 Planet vector created by pikisuperstar - www.freepik.com 404 vector created by freepik - www.freepik.com","link":"/about.html"},{"title":"友链","text":"Moeka","link":"/links.html"}],"posts":[{"title":"小探 GI global-metadata","text":"算是博客的第一篇正式文章。 最近尝试了一下原神私服，在弄模型替换的时候出了点问题，正好借此机会对游戏做一点探索。 起因 想要在游戏中进行模型替换需要一个叫做 Melonloader 的框架，但这个框架在 2.7 版本中无法使用了[1]。查看产生的 log 可以发现该问题出在 Il2CppDumper 上： 1234567891011121314151617...[20:57:40.389] Executing Il2CppDumper...[20:57:40.392] &quot;C:\\Users\\Miguel\\Downloads\\GrassCutPer\\Genshin Impact\\Genshin Impact Game\\MelonLoader\\Dependencies\\Il2CppAssemblyGenerator\\Il2CppDumper\\Il2CppDumper.exe&quot; &quot;C:\\Users\\Miguel\\Downloads\\GrassCutPer\\Genshin Impact\\Genshin Impact Game\\YuanShen_Data\\Native\\UserAssembly.dll&quot; &quot;C:\\Users\\Miguel\\Downloads\\GrassCutPer\\Genshin Impact\\Genshin Impact Game\\YuanShen_Data\\Native\\Data\\Metadata\\global-metadata.dat&quot;[20:57:40.766] Initializing metadata...[20:57:46.401] System.InvalidOperationException: 序列不包含任何元素[20:57:46.401] 在 System.Linq.Enumerable.Max[TSource](IEnumerable`1 source)[20:57:46.402] 在 Il2CppDumper.Metadata.&lt;&gt;c.&lt;ProcessingMetadataUsage&gt;b__38_0(KeyValuePair`2 x)[20:57:46.403] 在 System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()[20:57:46.404] 在 System.Linq.Enumerable.Max[TSource](IEnumerable`1 source)[20:57:46.405] 在 Il2CppDumper.Metadata.ProcessingMetadataUsage()[20:57:46.406] 在 Il2CppDumper.Metadata..ctor(Stream stream, StringDecryptionData decData, String nameTranslationPath)[20:57:46.407] 在 Il2CppDumper.Program.Init(String il2cppPath, String metadataPath, String nameTranslationPath, Metadata&amp; metadata, Il2Cpp&amp; il2Cpp)[20:57:46.408] 在 Il2CppDumper.Program.Main(String[] args)[20:57:46.419] Executing Il2CppAssemblyUnhollower......[20:57:46.516] [ERROR] 未经处理的异常: System.IO.DirectoryNotFoundException: 未能找到路径“C:\\Users\\Miguel\\Downloads\\GrassCutPer\\Genshin Impact\\Genshin Impact Game\\MelonLoader\\Dependencies\\Il2CppAssemblyGenerator\\Il2CppDumper\\DummyDll”的一部分。... 经过一番搜索后，我发现这个 Il2CppDumper 实际上是被修改过的，原本的 Il2CppDumper 只能解析出 unity 正常生成的 global-metadata.dat，但游戏将 global-metadata.dat 文件进行了一些混淆，所以不将其解密是无法成功将元数据导出来的。Il2CppDumper 大概的作用就是把经过 Il2Cpp 转换后需要用到的符号还原出来并生成一系列 dll 文件，而 Melonloader 的运行应该需要用到这些 dll 文件。 这样看来应该是 2.7 版本的混淆方法有了变化，导致这个针对之前设计的 Il2CppDumper 没法正确解密了。虽然静等作者更新这个程序也不是不行，但刚好我之前有过探索下这个游戏背后的程序结构之类的想法，于是就打算自己分析分析看看能不能把这个解密方法修复下。 行为 用二进制编辑器看了下 metadata 文件，头部的标志已经没有了，和之前版本的对比了下也没看出来什么门道。我首先想到的是抓抓系统调用看看打开 metadata 文件的前后发生了些啥，然而抓了后又把 map/read 之类操作和 metadata 文件对了下，依然看不出什么东西，显然这种简单的分析是完全没用的。更诡异的是运行几次后连 read 都抓不到了，难不成这东西还有缓存的？ 分析 UserAssembly.dll 于是把 UserAssembly.dll 丢进 ida 分析了下。直接搜索字符串 global-metadata，找到了看起来可能是打开文件的地方： 于是我参考了网上相关文章研究了下，怀疑到下面有一处调用的解密函数，这个函数初始化在一个导出函数中，其中还初始化了另一个函数。 不过解密函数目前来看都不在这个 dll 中，四处翻了翻后我就暂时结束了对 UserAssembly.dll 的探索。 分析 Il2CppDumper 接下来我把目光转向了 Il2CppDumper，想通过它分析下之前版本的 metadata 是怎么解密出来的（没找到这个被修改过的 Il2CppDumper 源码）。于是把他丢进 ida，搜索打印的 log 字符串 “Initializing metadata…”，很快我就发现了一个叫做 DecryptMetadata 的函数，显然是解密函数： ida 好像反汇编不了 .net 的程序，换个反编译工具 dnSpy，这下源码基本完全解析出来了。首先动态调试了下，找到异常抛出的位置向前回溯，发现问题出自 header.metadataUsageListsCount 为 0，这个 header 又是通过之前解密的 metadata 数据初始化出来的，这样看 metadata 果然还是没有被正确解密。 12345public static MetadataDecryption.StringDecryptionData DecryptMetadata(byte[] metadata){ MetadataDecryption.DecryptMetadataBlocks(metadata); return MetadataDecryption.DecryptMetadataStringInfo(metadata);} 细看第一个解密函数 DecryptMetadataBlocks，先是从文件后部复制了点数据，之后做了个比较。奇怪的是这个比较通过了，我又在二进制编辑器里对了下这个值，确实是对的，看来加密逻辑没有变动太多？ 第一个解密函数12345678private static void DecryptMetadataBlocks(byte[] metadata) { byte[] array = new byte[16384]; Buffer.BlockCopy(metadata, metadata.Length - array.Length, array, 0, array.Length); if (array[200] != 46 || array[201] != 252 || array[202] != 254 || array[203] != 44) { throw new ArgumentException(&quot;*((uint32_t*)&amp;footer[0xC8]) != 0x2CFEFC2E&quot;); } 后面主要就是数据复制，用异或方法压缩出了一个 key，之后又异或了一堆奇怪的预定义的值。看来之前加密的逻辑主要还是异或，还用到了一些预先定义好的数据。到这里感觉从 Il2CppDumper 也不再能看出太多了。 搭建主程序调试环境 推测下解密函数很有可能应该在主程序 YuanShen.exe 里面了，研究了下找到个方法能通过调试器直接启动游戏本体进私服，方便之后调试。 修改 GrassClipper 的 scripts/private_server_launch.cmd，找到这里： 12:: Launch game&quot;%GAME_PATH%&quot; 把 &quot;%GAME_PATH%&quot; 这部分注释掉，加个 pause。之后启动先把 grasscutter 服务端跑起来，然后在命令行运行这个脚本，带上下面这些参数： 1private_server_launch.cmd 127.0.0.1 443 true &quot;&lt;YuanShen.exe 路径&gt;&quot; &quot;&lt;GrassClipper 路径&gt;&quot; false true 这里服务地址端口都是默认的配置，之后这个脚本会把代理开起来，接下来直接运行游戏本体就能进私服了，关闭记得在终端输入字符把剩下的关闭流程跑完，否则代理设置不会被清除掉没法正常联网。 搭好调试环境后，我发现这游戏主程序加了壳的没法直接调试（废话），想在游戏过程中挂 x64dbg 也挂不上，不知道用了什么魔法。另外游戏会不断检查并尝试杀掉 x64dbg 等调试器，启动时也会检查，以及如果杀不掉甚至游戏直接退出。所以这个部分遇到了点困难。 这部分就触及到了我的知识盲区，先进行一波学习，之后会继续更新。 待续… 该问题的 Github Issue ↩︎","link":"/2022/06/10/gi_research_metadata/"},{"title":"序","text":"总之是本博客的第一篇文章。 大概是我建的第三个博客了，之前的几个因为各种原因现在连记录都已经没有了。第一个博客是大概 18 年 5 月，我在自己的主机上用 Wordpress 搭建的。和现在这个不同，当时用的是 .com 域名。但是之前实际上也没写什么东西出来，唯一一个比较可惜的是写过一篇关于 Windows 驱动的文章，现在也没有备份了。 之所以又建了这个博客是因为最近又觉得自己应该有一个能写些东西的地方，在已有的平台上写总感觉有些拘束，不如自己建一个更自由些。 这个博客是用 Hexo 搭建的，托管在 github 上，相对方便一些。 之后应该不会再把博客删掉了。","link":"/2022/05/28/preface/"}],"tags":[{"name":"逆向","slug":"逆向","link":"/tags/%E9%80%86%E5%90%91/"},{"name":"游戏","slug":"游戏","link":"/tags/%E6%B8%B8%E6%88%8F/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"}],"categories":[{"name":"逆向","slug":"逆向","link":"/categories/%E9%80%86%E5%90%91/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"}]}