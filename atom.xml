<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮枕星海</title>
  
  <subtitle>浮枕 blog</subtitle>
  <link href="https://universesaurora.top/atom.xml" rel="self"/>
  
  <link href="https://universesaurora.top/"/>
  <updated>2022-06-10T12:07:46.000Z</updated>
  <id>https://universesaurora.top/</id>
  
  <author>
    <name>浮枕</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小探 GI global-metadata</title>
    <link href="https://universesaurora.top/2022/06/10/gi_research_metadata/"/>
    <id>https://universesaurora.top/2022/06/10/gi_research_metadata/</id>
    <published>2022-06-10T12:07:34.000Z</published>
    <updated>2022-06-10T12:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>算是博客的第一篇正式文章。</p><p>最近尝试了一下原神私服，在弄模型替换的时候出了点问题，正好借此机会对游戏做一点探索。</p><span id="more"></span><h2 id="%E8%B5%B7%E5%9B%A0" tabindex="-1" id="起因">起因</h2><p>想要在游戏中进行模型替换需要一个叫做 Melonloader 的框架，但这个框架在 2.7 版本中无法使用了<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。查看产生的 log 可以发现该问题出在 Il2CppDumper 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[20:57:40.389] Executing Il2CppDumper...</span><br><span class="line">[20:57:40.392] &quot;C:\Users\Miguel\Downloads\GrassCutPer\Genshin Impact\Genshin Impact Game\MelonLoader\Dependencies\Il2CppAssemblyGenerator\Il2CppDumper\Il2CppDumper.exe&quot; &quot;C:\Users\Miguel\Downloads\GrassCutPer\Genshin Impact\Genshin Impact Game\YuanShen_Data\Native\UserAssembly.dll&quot; &quot;C:\Users\Miguel\Downloads\GrassCutPer\Genshin Impact\Genshin Impact Game\YuanShen_Data\Native\Data\Metadata\global-metadata.dat&quot;</span><br><span class="line">[20:57:40.766] Initializing metadata...</span><br><span class="line">[20:57:46.401] System.InvalidOperationException: 序列不包含任何元素</span><br><span class="line">[20:57:46.401]    在 System.Linq.Enumerable.Max[TSource](IEnumerable`1 source)</span><br><span class="line">[20:57:46.402]    在 Il2CppDumper.Metadata.&lt;&gt;c.&lt;ProcessingMetadataUsage&gt;b__38_0(KeyValuePair`2 x)</span><br><span class="line">[20:57:46.403]    在 System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()</span><br><span class="line">[20:57:46.404]    在 System.Linq.Enumerable.Max[TSource](IEnumerable`1 source)</span><br><span class="line">[20:57:46.405]    在 Il2CppDumper.Metadata.ProcessingMetadataUsage()</span><br><span class="line">[20:57:46.406]    在 Il2CppDumper.Metadata..ctor(Stream stream, StringDecryptionData decData, String nameTranslationPath)</span><br><span class="line">[20:57:46.407]    在 Il2CppDumper.Program.Init(String il2cppPath, String metadataPath, String nameTranslationPath, Metadata&amp; metadata, Il2Cpp&amp; il2Cpp)</span><br><span class="line">[20:57:46.408]    在 Il2CppDumper.Program.Main(String[] args)</span><br><span class="line">[20:57:46.419] Executing Il2CppAssemblyUnhollower...</span><br><span class="line">...</span><br><span class="line">[20:57:46.516] [ERROR] 未经处理的异常:  System.IO.DirectoryNotFoundException: 未能找到路径“C:\Users\Miguel\Downloads\GrassCutPer\Genshin Impact\Genshin Impact Game\MelonLoader\Dependencies\Il2CppAssemblyGenerator\Il2CppDumper\DummyDll”的一部分。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>经过一番搜索后，我发现这个 Il2CppDumper 实际上是被修改过的，原本的 Il2CppDumper 只能解析出 unity 正常生成的 global-metadata.dat，但游戏将 global-metadata.dat 文件进行了一些混淆，所以不将其解密是无法成功将元数据导出来的。Il2CppDumper 大概的作用就是把经过 Il2Cpp 转换后需要用到的符号还原出来并生成一系列 dll 文件，而 Melonloader 的运行应该需要用到这些 dll 文件。</p><p>这样看来应该是 2.7 版本的混淆方法有了变化，导致这个针对之前设计的 Il2CppDumper 没法正确解密了。虽然静等作者更新这个程序也不是不行，但刚好我之前有过探索下这个游戏背后的程序结构之类的想法，于是就打算自己分析分析看看能不能把这个解密方法修复下。</p><h2 id="%E8%A1%8C%E4%B8%BA" tabindex="-1" id="行为">行为</h2><p>用二进制编辑器看了下 metadata 文件，头部的标志已经没有了，和之前版本的对比了下也没看出来什么门道。我首先想到的是抓抓系统调用看看打开 metadata 文件的前后发生了些啥，然而抓了后又把 map/read 之类操作和 metadata 文件对了下，依然看不出什么东西，显然这种简单的分析是完全没用的。更诡异的是运行几次后连 read 都抓不到了，难不成这东西还有缓存的？</p><p><img src="https://s2.loli.net/2022/06/10/VgBNwJjQX9mWU82.png" alt="Process Monitor 记录"></p><h2 id="%E5%88%86%E6%9E%90-userassembly.dll" tabindex="-1" id="分析-UserAssembly-dll">分析 UserAssembly.dll</h2><p>于是把 UserAssembly.dll 丢进 ida 分析了下。直接搜索字符串 global-metadata，找到了看起来可能是打开文件的地方：</p><p><img src="https://s2.loli.net/2022/06/10/ZbP5GaLAdsYv2D9.png" alt="疑似打开文件"></p><p>于是我参考了网上相关文章研究了下，怀疑到下面有一处调用的解密函数，这个函数初始化在一个导出函数中，其中还初始化了另一个函数。</p><p><img src="https://s2.loli.net/2022/06/10/E4GAKo6kPxJReO8.png" alt="初始化解密函数"></p><p>不过解密函数目前来看都不在这个 dll 中，四处翻了翻后我就暂时结束了对 UserAssembly.dll 的探索。</p><h2 id="%E5%88%86%E6%9E%90-il2cppdumper" tabindex="-1" id="分析-Il2CppDumper">分析 Il2CppDumper</h2><p>接下来我把目光转向了 Il2CppDumper，想通过它分析下之前版本的 metadata 是怎么解密出来的（没找到这个被修改过的 Il2CppDumper 源码）。于是把他丢进 ida，搜索打印的 log 字符串 “Initializing metadata…”，很快我就发现了一个叫做 DecryptMetadata 的函数，显然是解密函数：</p><p><img src="https://s2.loli.net/2022/06/10/SQeip7WVCR6atUl.png" alt="DecryptMetadata"></p><p>ida 好像反汇编不了 .net 的程序，换个反编译工具 dnSpy，这下源码基本完全解析出来了。首先动态调试了下，找到异常抛出的位置向前回溯，发现问题出自 header.metadataUsageListsCount 为 0，这个 header 又是通过之前解密的 metadata 数据初始化出来的，这样看 metadata 果然还是没有被正确解密。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MetadataDecryption.<span class="function">StringDecryptionData <span class="title">DecryptMetadata</span>(<span class="params"><span class="built_in">byte</span>[] metadata</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MetadataDecryption.DecryptMetadataBlocks(metadata);</span><br><span class="line"><span class="keyword">return</span> MetadataDecryption.DecryptMetadataStringInfo(metadata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细看第一个解密函数 DecryptMetadataBlocks，先是从文件后部复制了点数据，之后做了个比较。奇怪的是这个比较通过了，我又在二进制编辑器里对了下这个值，确实是对的，看来加密逻辑没有变动太多？</p><figure class="highlight csharp"><figcaption><span>第一个解密函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DecryptMetadataBlocks</span>(<span class="params"><span class="built_in">byte</span>[] metadata</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">16384</span>];</span><br><span class="line">   Buffer.BlockCopy(metadata, metadata.Length - array.Length, array, <span class="number">0</span>, array.Length);</span><br><span class="line">   <span class="keyword">if</span> (array[<span class="number">200</span>] != <span class="number">46</span> || array[<span class="number">201</span>] != <span class="number">252</span> || array[<span class="number">202</span>] != <span class="number">254</span> || array[<span class="number">203</span>] != <span class="number">44</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;*((uint32_t*)&amp;footer[0xC8]) != 0x2CFEFC2E&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>后面主要就是数据复制，用异或方法压缩出了一个 key，之后又异或了一堆奇怪的预定义的值。看来之前加密的逻辑主要还是异或，还用到了一些预先定义好的数据。到这里感觉从 Il2CppDumper 也不再能看出太多了。</p><h2 id="%E6%90%AD%E5%BB%BA%E4%B8%BB%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83" tabindex="-1" id="搭建主程序调试环境">搭建主程序调试环境</h2><p>推测下解密函数很有可能应该在主程序 YuanShen.exe 里面了，研究了下找到个方法能通过调试器直接启动游戏本体进私服，方便之后调试。</p><p>修改 GrassClipper 的 scripts/private_server_launch.cmd，找到这里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:: Launch game</span><br><span class="line">&quot;%GAME_PATH%&quot;</span><br></pre></td></tr></table></figure><p>把 <code>&quot;%GAME_PATH%&quot;</code> 这部分注释掉，加个 pause。之后启动先把 grasscutter 服务端跑起来，然后在命令行运行这个脚本，带上下面这些参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private_server_launch.cmd 127.0.0.1 443 <span class="literal">true</span> <span class="string">&quot;&lt;YuanShen.exe 路径&gt;&quot;</span> <span class="string">&quot;&lt;GrassClipper 路径&gt;&quot;</span> <span class="literal">false</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里服务地址端口都是默认的配置，之后这个脚本会把代理开起来，接下来直接运行游戏本体就能进私服了，关闭记得在终端输入字符把剩下的关闭流程跑完，否则代理设置不会被清除掉没法正常联网。</p><p>搭好调试环境后，我发现这游戏主程序加了壳的没法直接调试（废话），想在游戏过程中挂 x64dbg 也挂不上，不知道用了什么魔法。另外游戏会不断检查并尝试杀掉 x64dbg 等调试器，启动时也会检查，以及如果杀不掉甚至游戏直接退出。所以这个部分遇到了点困难。</p><p><img src="https://s2.loli.net/2022/06/10/JWm9QEqiTSVgLX3.png" alt="本体有 vmp 壳"></p><p>这部分就触及到了我的知识盲区，先进行一波学习，之后会继续更新。</p><p>待续…</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/lassedds/Melonloader-AnimeGaming/issues/3">该问题的 Github Issue</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;算是博客的第一篇正式文章。&lt;/p&gt;
&lt;p&gt;最近尝试了一下原神私服，在弄模型替换的时候出了点问题，正好借此机会对游戏做一点探索。&lt;/p&gt;</summary>
    
    
    
    <category term="逆向" scheme="https://universesaurora.top/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://universesaurora.top/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="游戏" scheme="https://universesaurora.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>序</title>
    <link href="https://universesaurora.top/2022/05/28/preface/"/>
    <id>https://universesaurora.top/2022/05/28/preface/</id>
    <published>2022-05-28T16:05:54.000Z</published>
    <updated>2022-05-29T03:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>总之是本博客的第一篇文章。</p><span id="more"></span><p>大概是我建的第三个博客了，之前的几个因为各种原因现在连记录都已经没有了。第一个博客是大概 18 年 5 月，我在自己的主机上用 Wordpress 搭建的。和现在这个不同，当时用的是 .com 域名。但是之前实际上也没写什么东西出来，唯一一个比较可惜的是写过一篇关于 Windows 驱动的文章，现在也没有备份了。</p><p>之所以又建了这个博客是因为最近又觉得自己应该有一个能写些东西的地方，在已有的平台上写总感觉有些拘束，不如自己建一个更自由些。</p><p>这个博客是用 <a href="https://hexo.io/zh-cn/">Hexo</a> 搭建的，托管在 <a href="https://github.com/UniversesAurora/universesaurora-blog">github</a> 上，相对方便一些。</p><p>之后应该不会再把博客删掉了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;总之是本博客的第一篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://universesaurora.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://universesaurora.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
